#!/bin/bash
# Pre-push hook for AI Admissions Assistant
# Runs both Server and Client tests before allowing push to remote

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}╔═══════════════════════════════════════╗${NC}"
echo -e "${BLUE}║   Running Pre-Push Tests             ║${NC}"
echo -e "${BLUE}╚═══════════════════════════════════════╝${NC}\n"

# Get the root directory of the git repository
REPO_ROOT=$(git rev-parse --show-toplevel)
SERVER_DIR="$REPO_ROOT/Server"
CLIENT_DIR="$REPO_ROOT/Client"

# Track overall test status
TESTS_PASSED=true

# ============================================
# Run Server Tests
# ============================================
echo -e "${YELLOW}► Running Server Tests...${NC}\n"

if [ ! -d "$SERVER_DIR" ]; then
    echo -e "${RED}Error: Server directory not found at $SERVER_DIR${NC}"
    exit 1
fi

cd "$SERVER_DIR"

# Check if virtual environment exists and activate it
if [ -d "venv" ]; then
    source venv/bin/activate
elif [ -d ".venv" ]; then
    source .venv/bin/activate
fi

# Check if pytest is available
if ! command -v pytest &> /dev/null; then
    echo -e "${YELLOW}pytest not found. Installing test dependencies...${NC}"
    if [ -f "requirements-test.txt" ]; then
        pip install -q -r requirements-test.txt
    else
        echo -e "${RED}Error: requirements-test.txt not found${NC}"
        exit 1
    fi
fi

# Ensure test dependencies are installed
if [ -f "requirements-test.txt" ]; then
    pip install -q -r requirements-test.txt
fi

# Run pytest without coverage for pre-push (faster)
if pytest -q --tb=short --no-cov 2>/dev/null || pytest -q --tb=short; then
    echo -e "\n${GREEN}✓ Server tests passed!${NC}\n"
else
    echo -e "\n${RED}✗ Server tests failed!${NC}\n"
    TESTS_PASSED=false
fi

# ============================================
# Run Client Tests
# ============================================
echo -e "${YELLOW}► Running Client Tests...${NC}\n"

if [ ! -d "$CLIENT_DIR" ]; then
    echo -e "${RED}Error: Client directory not found at $CLIENT_DIR${NC}"
    exit 1
fi

cd "$CLIENT_DIR"

# Check if node_modules exists
if [ ! -d "node_modules" ]; then
    echo -e "${YELLOW}node_modules not found. Installing dependencies...${NC}"
    npm install
fi

# Run client tests
if npm run test; then
    echo -e "\n${GREEN}✓ Client tests passed!${NC}\n"
else
    echo -e "\n${RED}✗ Client tests failed!${NC}\n"
    TESTS_PASSED=false
fi

# ============================================
# Final Result
# ============================================
if [ "$TESTS_PASSED" = true ]; then
    echo -e "${BLUE}╔═══════════════════════════════════════╗${NC}"
    echo -e "${GREEN}║   ✓ All Tests Passed!                ║${NC}"
    echo -e "${GREEN}║   Proceeding with push...            ║${NC}"
    echo -e "${BLUE}╚═══════════════════════════════════════╝${NC}\n"
    exit 0
else
    echo -e "${BLUE}╔═══════════════════════════════════════╗${NC}"
    echo -e "${RED}║   ✗ Tests Failed!                    ║${NC}"
    echo -e "${RED}║   Push aborted.                      ║${NC}"
    echo -e "${BLUE}╚═══════════════════════════════════════╝${NC}"
    echo -e "${YELLOW}Please fix the failing tests before pushing.${NC}\n"
    exit 1
fi
